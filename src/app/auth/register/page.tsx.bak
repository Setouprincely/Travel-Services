"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { motion } from "framer-motion";
import { Navigation } from "@/components/layout/navigation";
import { Footer } from "@/components/layout/footer";
import { WhatsAppWidget } from "@/components/ui/whatsapp-widget";
import { FormField } from "@/components/ui/form-field";
import { AnimatedButton } from "@/components/ui/animated-button";
import { useAuth } from "@/contexts/auth-context";

export default function RegisterPage() {
  const router = useRouter();
  const { register } = useAuth();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
    confirmPassword: "",
  });

  const documentTypes = [
    { value: "passport", label: "Passport" },
    { value: "national_id", label: "National ID" },
    { value: "drivers_license", label: "Driver's License" },
    { value: "birth_certificate", label: "Birth Certificate" },
  ];

  const genderOptions = [
    { value: "male", label: "Male" },
    { value: "female", label: "Female" },
    { value: "other", label: "Other" },
    { value: "prefer_not_to_say", label: "Prefer not to say" },
  ];

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    const newValue = type === 'checkbox' ? (e.target as HTMLInputElement).checked : value;
    
    setFormData(prev => ({ ...prev, [name]: newValue }));
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: "" }));
    }
  };

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.firstName) newErrors.firstName = "First name is required";
    if (!formData.lastName) newErrors.lastName = "Last name is required";
    if (!formData.email) newErrors.email = "Email is required";
    if (!formData.password) newErrors.password = "Password is required";
    if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = "Passwords do not match";
    }
    if (!formData.country) newErrors.country = "Country is required";
    if (!formData.nationality) newErrors.nationality = "Nationality is required";
    if (!formData.dateOfBirth) newErrors.dateOfBirth = "Date of birth is required";
    if (!formData.placeOfBirth) newErrors.placeOfBirth = "Place of birth is required";
    if (!formData.gender) newErrors.gender = "Gender is required";
    if (!formData.documentType) newErrors.documentType = "Document type is required";
    if (!formData.documentNumber) newErrors.documentNumber = "Document number is required";
    if (!formData.documentIssueDate) newErrors.documentIssueDate = "Document issue date is required";
    if (formData.hasHandicap && !formData.handicapDetails) {
      newErrors.handicapDetails = "Please provide details about your handicap";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setIsSubmitting(true);
    try {
      const { confirmPassword, ...registrationData } = formData;
      await register(registrationData);
      router.push('/auth/profile');
    } catch (error) {
      if (error instanceof Error) {
        setErrors(prev => ({ ...prev, submit: error.message }));
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white">
      <Navigation />
      
      <main className="container mx-auto px-4 py-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="max-w-2xl mx-auto bg-white/80 backdrop-blur-lg rounded-xl shadow-lg p-6"
        >
          <h1 className="text-3xl font-bold text-gray-800 mb-6">Create Account</h1>
          
          {errors.submit && (
            <div className="mb-4 p-4 bg-red-50 text-red-600 rounded-lg">
              {errors.submit}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                label="First Name"
                name="firstName"
                type="text"
                value={formData.firstName}
                onChange={handleInputChange}
                error={errors.firstName}
              />
              
              <FormField
                label="Last Name"
                name="lastName"
                type="text"
                value={formData.lastName}
                onChange={handleInputChange}
                error={errors.lastName}
              />
            </div>

            <FormField
              label="Email"
              name="email"
              type="email"
              value={formData.email}
              onChange={handleInputChange}
              error={errors.email}
            />

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                label="Password"
                name="password"
                type="password"
                value={formData.password}
                onChange={handleInputChange}
                error={errors.password}
              />
              
              <FormField
                label="Confirm Password"
                name="confirmPassword"
                type="password"
                value={formData.confirmPassword}
                onChange={handleInputChange}
                error={errors.confirmPassword}
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                label="Country"
                name="country"
                type="text"
                value={formData.country}
                onChange={handleInputChange}
                error={errors.country}
              />
              
              <FormField
                label="Nationality"
                name="nationality"
                type="text"
                value={formData.nationality}
                onChange={handleInputChange}
                error={errors.nationality}
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                label="Date of Birth"
                name="dateOfBirth"
                type="date"
                value={formData.dateOfBirth}
                onChange={handleInputChange}
                error={errors.dateOfBirth}
              />
              
              <FormField
                label="Place of Birth"
                name="placeOfBirth"
                type="text"
                value={formData.placeOfBirth}
                onChange={handleInputChange}
                error={errors.placeOfBirth}
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                label="Gender"
                name="gender"
                type="select"
                value={formData.gender}
                onChange={handleInputChange}
                error={errors.gender}
                options={genderOptions}
              />
              
              <FormField
                label="Document Type"
                name="documentType"
                type="select"
                value={formData.documentType}
                onChange={handleInputChange}
                error={errors.documentType}
                options={documentTypes}
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                label="Document Number"
                name="documentNumber"
                type="text"
                value={formData.documentNumber}
                onChange={handleInputChange}
                error={errors.documentNumber}
              />
              
              <FormField
                label="Document Issue Date"
                name="documentIssueDate"
                type="date"
                value={formData.documentIssueDate}
                onChange={handleInputChange}
                error={errors.documentIssueDate}
              />
            </div>

            <div className="space-y-4">
              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="hasHandicap"
                  name="hasHandicap"
                  checked={formData.hasHandicap}
                  onChange={handleInputChange}
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <label htmlFor="hasHandicap" className="text-gray-700">
                  Do you have any handicap or special needs?
                </label>
              </div>

              {formData.hasHandicap && (
                <FormField
                  label="Please provide details about your handicap"
                  name="handicapDetails"
                  type="textarea"
                  value={formData.handicapDetails}
                  onChange={handleInputChange}
                  error={errors.handicapDetails}
                />
              )}
            </div>

            <div className="flex flex-col space-y-4">
              <AnimatedButton
                type="submit"
                disabled={isSubmitting}
                className="w-full"
              >
                {isSubmitting ? "Creating Account..." : "Create Account"}
              </AnimatedButton>

              <p className="text-center text-gray-600">
                Already have an account?{" "}
                <Link href="/auth/login" className="text-blue-600 hover:text-blue-700">
                  Log in
                </Link>
              </p>
            </div>
          </form>
        </motion.div>
      </main>

      <Footer />
      <WhatsAppWidget />
    </div>
  );
}
